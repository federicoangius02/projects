Adesso ti invio app.py ed ingress.yaml cos√¨ li aggiorni e non sbaglio

app.py:

rom flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
import os
import logging

app = Flask(__name__)
CORS(app)  # Abilita CORS per tutte le rotte

# Configurazione base del logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configurazione del database
app.config['SQLALCHEMY_DATABASE_URI'] = (
    f"postgresql://"
    f"{os.getenv('POSTGRES_USER', 'postgres')}:"
    f"{os.getenv('POSTGRES_PASSWORD', 'mysecretpassword')}@"
    f"{os.getenv('POSTGRES_SERVICE_SERVICE_HOST', 'postgres-service')}:"
    f"{os.getenv('POSTGRES_SERVICE_SERVICE_PORT', '5432')}/"
    f"{os.getenv('POSTGRES_DB', 'postgres')}"
)
db = SQLAlchemy(app)

# Modello semplice
class Utente(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(50))

# Crea le tabelle al primo avvio
with app.app_context():
    db.create_all()
    logger.info("Database inizializzato")

# Endpoint base - risponde a / (l'Ingress gestisce /api)
@app.route("/")
def hello():
    logger.info("Richiesta API ricevuta")
    return "Backend funziona!"

# Endpoint per verificare il database
@app.route("/db-check")
def db_check():
    try:
        Utente.query.first()
        logger.info("Database check successful")
        return "Database connesso correttamente"
    except Exception as e:
        logger.error(f"Errore database: {str(e)}")
        return f"Errore database: {str(e)}", 500

# Endpoint per gestire utenti
@app.route("/utenti", methods=["GET", "POST"])
def utenti():
    if request.method == "POST":
        nome = request.json.get('nome')
        if not nome:
            return "Nome mancante", 400
            
        nuovo_utente = Utente(nome=nome)
        db.session.add(nuovo_utente)
        db.session.commit()
        logger.info(f"Creato utente: {nome}")
        return f"Utente {nome} creato", 201
    
    # GET
    utenti = Utente.query.all()
    logger.info(f"Recuperati {len(utenti)} utenti")
    return jsonify([{"id": u.id, "nome": u.nome} for u in utenti])

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

ingress.yaml:

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: basic-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
  - host: k8s-basic.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      - path: /api(/|$)(.*)  # Regex per catturare tutto dopo /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 5000